require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe AccountsController do

  before (:each) do
    @user = FactoryGirl.create(:user)
    sign_in @user
  end

  # This should return the minimal set of attributes required to create a valid
  # Account. As you add validations to Account, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    { "amount" => "1.5" }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # AccountsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET index" do
    it "assigns all accounts as @accounts" do
      account = FactoryGirl.create :account, user: @user
      get :index, :user_id => @user.id
      assigns(:accounts).should eq([account])
    end

    it "only should it show the account for the user in params" do
      account = FactoryGirl.create :account, user: @user
      another_user = FactoryGirl.create(:another_user)
      account = FactoryGirl.create :account, user: another_user
      get :index, :user_id => @user.id
      assigns(:accounts).count.should eq(1)
    end
  end

  describe "GET new" do
    it "assigns a new account as @account" do
      get :new, :user_id => @user.id
      assigns(:account).should be_a_new(Account)
    end
  end

  describe "GET edit" do
    it "assigns the requested account as @account" do
      account = FactoryGirl.create :account, user: @user
      get :edit, {:id => account.to_param, :user_id => @user.id}
      assigns(:account).should eq(account)
    end
  end

  describe "POST create" do

    describe "with valid params" do
      it "creates a new Account" do
        expect {
          post :create, {:account => valid_attributes, :user_id => @user.id}
        }.to change(Account, :count).by(1)
      end

      it "assigns a newly created account as @account" do
        post :create, {:account => valid_attributes, :user_id => @user.id}
        assigns(:account).should be_a(Account)
        assigns(:account).should be_persisted
      end

      it "redirects to the created account" do
        post :create, {:account => valid_attributes, :user_id => @user.id}
        response.should redirect_to(user_account_path(@user, Account.last))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved account as @account" do
        # Trigger the behavior that occurs when invalid params are submitted
        Account.any_instance.stub(:save).and_return(false)
        post :create, {:account => { "amount" => "invalid value" }, :user_id => @user.id}
        assigns(:account).should be_a_new(Account)
      end

      #it "re-renders the 'new' template" do
      #  # Trigger the behavior that occurs when invalid params are submitted
      #  Account.any_instance.stub(:save).and_return(false)
      #  post :create, {:account => { "amount" => "invalid value", :user_id => @user.id }}
      #  response.should render_template("new")
      #end
    end
  end

  describe "PUT update" do

    before (:each) do
      @account = FactoryGirl.create :account, user: @user
      # Assuming there are no other accounts in the database, this
      # specifies that the Account created on the previous line
      # receives the :update_attributes message with whatever params are
      # submitted in the request.
    end

    describe "with valid params" do

      it "updates the requested account" do
        Account.any_instance.should_receive(:update_attributes).with({ "amount" => "1.5" })
        put :update, {:id => @account.to_param, :account => { "amount" => "1.5" }, :user_id => @user.id}
      end

      it "assigns the requested account as @account" do
        put :update, {:id => @account.to_param, :account => valid_attributes, :user_id => @user.id}
        assigns(:account).should eq(@account)
      end

      it "redirects to the account" do
        put :update, {:id => @account.to_param, :account => valid_attributes, :user_id => @user.id}
        response.should redirect_to(user_account_path(@user, @account))
      end
    end

    describe "with invalid params" do
      it "assigns the account as @account" do
        # Trigger the behavior that occurs when invalid params are submitted
        Account.any_instance.stub(:save).and_return(false)
        put :update, {:id => @account.to_param, :account => { "amount" => "invalid value" }, :user_id => @user.id}
        assigns(:account).should eq(@account)
      end

      #it "re-renders the 'edit' template" do
      #  # Trigger the behavior that occurs when invalid params are submitted
      #  eAccount.any_instance.stub(:save).and_return(false)
      #  put :update, {:id => @account.to_param, :account => { "amount" => "invalid value" }, :user_id => @user.id}
      #  response.should render_template("edit")
      #end
    end
  end

  describe "DELETE destroy" do

    before (:each) do
      @account = FactoryGirl.create :account, user: @user
    end

    it "destroys the requested account" do
      expect {
        delete :destroy, {:id => @account.to_param, :user_id => @user.id}
      }.to change(Account, :count).by(-1)
    end

    it "redirects to the accounts list" do
      delete :destroy, {:id => @account.to_param, :user_id => @user.id}
      response.should redirect_to(user_accounts_path(@user))
    end
  end

end
