require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe IncomesController do

  before (:each) do
    @user = FactoryGirl.create(:user)
    sign_in @user
    @account = FactoryGirl.create :account
    @income = FactoryGirl.create :income, account_id: @account.id
  end

  # This should return the minimal set of attributes required to create a valid
  # Account. As you add validations to Account, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    { "amount" => "1.5" }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # AccountsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET index" do
    it "assigns all incomes as @incomes" do
      get :index, :account_id => @account.id
      assigns(:transactions).should eq([@income])
    end

  end

  describe "GET new" do
    it "assigns a new income as @income" do
      get :new, :account_id => @account.id
      assigns(:transaction).should be_a_new(Income)
    end
  end

  describe "POST create" do

    describe "with valid params" do
      it "creates a new Income" do
        expect {
          post :create, {:income => valid_attributes, :account_id => @account.id}
        }.to change(Income, :count).by(1)
      end

      it "assigns a newly created income as @income" do
        post :create, {:income => valid_attributes, :account_id => @account.id}
        assigns(:transaction).should be_a(Income)
        assigns(:transaction).should be_persisted
      end

      it "redirects to the transactions" do
        post :create, {:income => valid_attributes, :account_id => @account.id}
        response.should redirect_to(account_transactions_path(@account))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved income as @income" do
        # Trigger the behavior that occurs when invalid params are submitted
        Income.any_instance.stub(:save).and_return(false)
        post :create, {:income => { "amount" => "-1.5" }, :account_id => @account.id }
        assigns(:transaction).should be_a_new(Income)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Income.any_instance.stub(:save).and_return(false)
        post :create, {:income => { "amount" => "-1.5"}, :account_id => @account.id }
        response.should render_template("new")
      end
    end
  end


end
